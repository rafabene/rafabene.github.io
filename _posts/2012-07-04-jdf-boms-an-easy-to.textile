---
title: JDF BOMs - An easy way to start your Java EE 6 Projects
tags:
  - bom
  - jboss
  - jdf
  - maven
  - redhat
  - stack
---
<p><span style="text-align: justify; ">For many years acting as a </span><a href="http://www.redhat.com/products/jbossenterprisemiddleware/" target="_blank" style="text-align: justify; ">JBoss Enterprise Middleware</a><span style="text-align: justify; "> consultant, many customers among many other requests wanted to:</span></p><ol><li style="text-align: justify; ">Migrate their existing applications to a Maven build</li><li style="text-align: justify; ">Migrate their existing Maven applications to a JBoss Stack</li><li style="text-align: justify; ">Start the development of a new application using the JBoss Stack and our best practices and solutions.</li></ol><p style="text-align: justify; ">The Java EE spec is an umbrella spec to another specs. Each one with its different versions (JSF 2.0, JPA 2.0, Servlet 3.0, EJB 3.1, etc). Developers shouldn't mix different APIs versions from different JAVA EE specs. The application should be targeted to only one Java EE spec. The same recommendation applies not only to spec APIs but also with other dependencies whose its API could change on each version. </p><p style="text-align: justify; ">Well, there were situations where the existing Maven applications were using different versions of spec APIs (Java EE 4, 5, 6) on the same project or were using dependencies of versions that were not planned to use on the version of their existing JBoss infrastructure. </p><h2>The BOM concept. </h2><p style="text-align: justify; ">For that reason the <a href="http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Importing_Dependencies" target="_blank">BOM (Bill of Materials) concept in Maven</a> addresses this kind of issue very well and I have always recommended it to our customers. <span style="background-color: rgb(252, 251, 250); text-align: left; ">BOM's are maven pom.xml files that specify the versions of all runtime dependencies for a given module or project. F</span>ortunately Red Hat is helping the developers to use this kind of approach for Java EE 6 projects by <a href="https://repository.jboss.org/nexus/content/groups/public/org/jboss/spec/" target="_blank">providing all Java EE 6 APIs as Maven dependencies</a>. </p><p style="text-align: justify; ">The new <a href="http://www.jboss.org/jdf/" target="_blank">JDF (JBoss Developer Framework</a>) that was <a href="http://planet.jboss.org/post/announcing_jdf_jboss_developer_framework" target="_blank">announced</a> in June, provides an easy way to add Java EE spec and also the JBoss tools/projects/products (errai, hibernate, arquilian, etc) dependencies to your project.</p><p style="text-align: justify; "><i><span style="color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 20px; ">The JBoss BOMs project provides Maven BOM files enhancing Jave EE 6 with deployment and test tooling. These files manage the version of the dependencies you use in your project, ensuring you always get a compatible stack." (<a href="http://www.jboss.org/jdf/stack/jboss-bom/" target="_blank">JDF JBoss BOM Site</a>)</span></i></p><p style="text-align: justify; ">The list of all these JBoss BOMs can be found at <a href="http://www.jboss.org/jdf/stack/jboss-bom/">http://www.jboss.org/jdf/stack/jboss-bom/</a></p><h2 style="text-align: justify; ">Can it be easier ? - JDF plugin announcement</h2><p style="text-align: justify; ">Sure it can!. JDF has a <a href="https://github.com/jboss-jdf/plugin-jdf" target="_blank">plugin</a> to <a href="http://www.jboss.org/forge" target="_blank">JBoss Forge</a> that helps the using of the JBoss BOMs in your Maven Project. To use it, first you need to install the plugin running the following command at Forge prompt:</p><pre style="text-align: justify; ">$ forge install-plugin jdf</pre><p style="text-align: justify; ">This command will trigger the installation proccess of the JDF plugin in to JBoss Forge. To see the list of all available JBoss BOMs you can run:</p><pre style="text-align: justify; ">$ jdf show-stacks </pre><p style="text-align: justify; "><a href="/assets/images/jdfShowStacks.png" target="_blank"> <img src="/assets/images/jdfShowStacks.png" align="baseline" border="0" hspace="0" vspace="0" width="473" heigth="50%" /></a></p><p style="text-align: justify; ">After evaluating what is the best Stack for your project, simply run the jdf use-stack command.</p><pre><div style="text-align: justify; ">$ jdf use-stack --stack <DESIRED STACK> </div><p style="text-align: justify; ">or </p></pre><pre><p style="text-align: justify; ">$ jdf use-stack --stack <DESIRED STACK> --version <VERSION> </p></pre><p style="text-align: justify; "><a href="/assets/images/jdfInsalledStack.png" target="_blank"><img src="/assets/images/jdfInsalledStack.png" align="baseline" border="0" hspace="0" vspace="0" width="473" heigth="70%" /></a> </p><p style="text-align: justify; ">You can add more than one Stack to your project.</p><p style="text-align: justify; ">Enjoy! </p><h2>More info:</h2>
  
<p style="text-align: justify; "><a href="http://www.jboss.org/jdf/stack/jboss-bom/">http://www.jboss.org/jdf/stack/jboss-bom/</a></p>
<p style="text-align: justify; "><a href="https://github.com/jboss-jdf/plugin-jdf/blob/master/README.md">https://github.com/jboss-jdf/plugin-jdf/blob/master/README.md</a> </p><p style="text-align: justify; "><a href="http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html">http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html</a></p>
<p style="text-align: justify; "><a href="https://repository.jboss.org/nexus/content/groups/public/org/jboss/spec/">https://repository.jboss.org/nexus/content/groups/public/org/jboss/spec/</a> </p>