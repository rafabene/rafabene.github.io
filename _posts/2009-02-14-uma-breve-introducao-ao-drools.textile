---
title: Uma breve introdução ao Drools
---
<p>Depois que <a target="_blank" href="/2009/01/20/trabalhando-com-o-drools/">postei sobre um recente trabalho</a> utilizando o <a target="_blank" href="http://www.jboss.org/drools/">Drools</a> surgiram bastante pessoas interessadas em utilizar o <a target="_blank" href="http://www.jboss.org/drools/">Drools</a> em alguns projetos e também uma série de questionamentos do tipo: Em quais casos devo utilizar um engine de regras ? Como começar com o <a target="_blank" href="http://www.jboss.org/drools/">Drools</a> ? E até: Tive "tal" problema. Qual a solução ?</p><p>Não conseguirei responder a todas as perguntas feitas em um só post, mas tenho procurado responder todas as perguntas feitas por e-mail ou pelo Google Talk. De maneira geral sempre quando alguém me pergunta se deve usar o <a target="_blank" href="http://www.jboss.org/drools/">Drools</a> em seus projetos, respondo que não! Quase sempre é tão óbvio quando você precisa de um "processador de regras" em seus projetos, que se houver dúvidas, o seu caso/projeto não cabe a utilização. Outro fator para que eu sempre responda isto é que eu gosto dos princípios <a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_blank">DRY</a> e <a href="http://pt.wikipedia.org/wiki/YAGNI" target="_blank">YAGNI</a>. </p><p>Se você se deu conta de que você realmente precisa de um "processador de regras" então podemos passar para a resposta da segunda pergunta: Como começar com o <a target="_blank" href="http://www.jboss.org/drools/">Drools</a>? O <a target="_blank" href="http://www.jboss.org/drools/">Drools</a> trabalha básicamente com uma memória interna para processar as regras. Esta memória é chamada de "Working Memory" e nela pode ser colocado qualquer tipo de objeto Java.</p><p>Para ilustrar o seu funcionamento, usarei como exemplo uma empresa que pretende automatizar as residências de seus clientes fornecendo um serviço personalizado que permite ao cliente escolher suas próprias regras para ligar e desligar o ar-condicionado de acordo com a temperatura escolhida. Desta maneira, foram criadas 3 classes para o nosso domínio: <b><i>Natureza</i></b> (que possui uma temperatura), a classe <b><i>ArCondicionado</i></b> (para ser ligado e desligado e tem uma referência para a Casa na qual foi instalado) e a classe <b><i>Casa</i></b> (que possui obrigatoriamente um dono em um ar-condicionado).</p>

<img hspace="0" vspace="0" border="0" align="baseline"  src="/assets/images/natureza.png" style="width: 400px; height: 278px;" />
  
<img hspace="0" vspace="0" border="0" align="baseline"  src="/assets/images/arCondicionado.png" style="width: 504px; height: 498px;" />

<p><img hspace="0" vspace="0" border="0" align="baseline"  src="/assets/images/casa.png" style="width: 504px; height: 327px;" /> </p><p>Neste momento a empresa possui 3 clientes: Rafael, Frederico e João Gabriel. Os dois primeiros já informaram a empresa de automação quais são suas preferências - Rafael ( ar ligado entre 20 a 26 graus) e Frederico (ar ligado entre 18 e 21 graus). Isto deu origem as seguintes regras:</p>

{% highlight java %}
package benevides

rule "Ligar ar-condicionado do Rafael quando temperatura maior que 26 graus"
  when
    Casa( dono == "Rafael", $arCondicionado: arCondicionado)
    Natureza( temperatura > 26 )
  then
   $arCondicionado.ligar();
end

rule "Desligar ar-condicionado do Rafael quando temperatura menor que 20 graus"
  when        
    Casa( dono == "Rafael", $arCondicionado: arCondicionado  )
    Natureza( temperatura  < 20 )
  then
    $arCondicionado.desligar();
end

rule "Ligar ar-condicionado do Frederico quando temperatura maior que 21 graus"
  when
    Casa( dono == "Frederico", $arCondicionado: arCondicionado  )
    Natureza( temperatura  > 21 )
  then
    $arCondicionado.ligar();
end

rule "Desligar ar-condicionado do Frederico quando temperatura menor que 18 graus"
  when
    Casa( dono == "Frederico", $arCondicionado: arCondicionado  )
    Natureza( temperatura  < 18 )
  then         
    $arCondicionado.desligar();
end
{% endhighlight %}

<p>Uma vez definida as regras, já podemos implementar uma classe que oscilará a temperatura decrescendo de 30 graus até 15 graus e depois retornando até 30 graus novamente. Para verificar o comportamento, vamos inserir na <i><b>WorkingMemory</b></i> do <a target="_blank" href="http://www.jboss.org/drools/">Drools</a> as instâncias do objeto <b><i>Casa</i></b> (uma instância de cada cliente) e a cada alteração de temperatura, vamos atualizar a temperatura da instância da classe <b><i>Natureza</i></b> e também atualizar esta instância na <i><b>WorkingMemory</b></i>.</p><p><b>Um detalhe importante:</b> Para se atualizar uma instância que já está dentro da WorkingMemory (como é o caso do objeto Natureza, é necessário possuir um "<i>Handle</i>" para este objeto.</p><p>Segue abaixo o método main que dispara as regras para cada alteração de temperatura:</p><p><img hspace="0" vspace="0" border="0" align="baseline" style="width: 550px; height: 514px;" src="/assets/images/teste.png" /> </p><p>O resultado é mostrado abaixo. Percebam que o cliente que não possui regras (João Gabriel) não foi mostrado no resultado por motivos óbvios. </p><p>Um erro muito comum e pensar no Drools como um mero substitudo para os IF's. Apesar da semelhança,  o Drools não possui um "else". O pensamento correto é: <i>"Dado um fato, qual a sua conseqüência?"</i> Não estamos programando (fora do Java), estamos determinando regras!</p><p> <img hspace="0" vspace="0" border="0" align="baseline" src="/assets/images/resultado.png" /></p>

<p>Na próxima postagem pretendo falar um pouco mais sobre o método lerRegras() e seu uso dentro de servidores de aplicação.</p><p> Até breve!</p>